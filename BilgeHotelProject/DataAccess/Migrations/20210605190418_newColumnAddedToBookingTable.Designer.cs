// <auto-generated />
using System;
using DataAccess.Concrete.EntityFrameworkCore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(HotelDbContext))]
    [Migration("20210605190418_newColumnAddedToBookingTable")]
    partial class newColumnAddedToBookingTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Concrete.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Entities.Concrete.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Entities.Concrete.Booking", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingFrom")
                        .HasColumnType("datetime2");

                    b.Property<int>("BookingPackageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("NoOfGuests")
                        .HasColumnType("int");

                    b.Property<string>("PersonLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("BookingPackageId");

                    b.HasIndex("RoomId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Entities.Concrete.BookingPackage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookingPackageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("BookingPackages");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BookingPackageName = "Tam Pansiyon"
                        },
                        new
                        {
                            ID = 2,
                            BookingPackageName = "Her Şey Dahil"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Duty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DutyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Duties");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Resepsiyonda görevli personel",
                            DutyName = "Resepsiyon Görevlisi"
                        },
                        new
                        {
                            ID = 2,
                            Description = "Temizlikten sorumlu personel",
                            DutyName = "Temizlik Görevlisi"
                        },
                        new
                        {
                            ID = 3,
                            Description = "Mutfak Personeli",
                            DutyName = "Aşçı"
                        },
                        new
                        {
                            ID = 4,
                            Description = "Restaurant çalışanı",
                            DutyName = "Garson"
                        },
                        new
                        {
                            ID = 5,
                            Description = "Elektrik işleri sorumlusu personel",
                            DutyName = "Elektrikçi"
                        },
                        new
                        {
                            ID = 6,
                            Description = "Bilgi işlem personeli",
                            DutyName = "Bilgi İşlem Sorumlusu"
                        },
                        new
                        {
                            ID = 7,
                            Description = "Yönetici",
                            DutyName = "Yönetici"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Guest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NationalIdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RoomId");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("Entities.Concrete.Manager", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DutyId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NationalIdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("ID");

                    b.HasIndex("DutyId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Entities.Concrete.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BookingId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Entities.Concrete.PaymentType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PaymentTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            PaymentTypeName = "Kredi Kartı"
                        },
                        new
                        {
                            ID = 2,
                            PaymentTypeName = "Banka Kartı"
                        },
                        new
                        {
                            ID = 3,
                            PaymentTypeName = "Nakit"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.PayrollForManager", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("SalaryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ManagerId");

                    b.ToTable("PayrollForManagers");
                });

            modelBuilder.Entity("Entities.Concrete.PayrollForWorker", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("DailyWorkingHours")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("HourlyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<short>("Overtime")
                        .HasColumnType("smallint");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("SalaryDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("TotalWorkingDaysPerMonth")
                        .HasColumnType("smallint");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("WorkerId");

                    b.ToTable("PayrollForWorkers");
                });

            modelBuilder.Entity("Entities.Concrete.Room", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("DoubleBadCount")
                        .HasColumnType("smallint");

                    b.Property<short>("FloorNumber")
                        .HasColumnType("smallint");

                    b.Property<string>("RoomDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RoomFeatures")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<short>("RoomNumber")
                        .HasColumnType("smallint");

                    b.Property<int>("RoomStatusId")
                        .HasColumnType("int");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<short>("SingleBadCount")
                        .HasColumnType("smallint");

                    b.HasKey("ID");

                    b.HasIndex("RoomStatusId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)1,
                            RoomDescription = "Tek kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet",
                            RoomNumber = (short)110,
                            RoomStatusId = 1,
                            RoomTypeId = 1,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 2,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)1,
                            RoomDescription = "Tek kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet",
                            RoomNumber = (short)111,
                            RoomStatusId = 1,
                            RoomTypeId = 1,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 3,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)1,
                            RoomDescription = "Tek kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet",
                            RoomNumber = (short)112,
                            RoomStatusId = 1,
                            RoomTypeId = 1,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 4,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)1,
                            RoomDescription = "Tek kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet",
                            RoomNumber = (short)113,
                            RoomStatusId = 1,
                            RoomTypeId = 1,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 5,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)1,
                            RoomDescription = "Tek kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet",
                            RoomNumber = (short)114,
                            RoomStatusId = 1,
                            RoomTypeId = 1,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 6,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)1,
                            RoomDescription = "Tek kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet",
                            RoomNumber = (short)115,
                            RoomStatusId = 1,
                            RoomTypeId = 1,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 7,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)1,
                            RoomDescription = "Tek kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet",
                            RoomNumber = (short)116,
                            RoomStatusId = 1,
                            RoomTypeId = 1,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 8,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)1,
                            RoomDescription = "Tek kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet",
                            RoomNumber = (short)117,
                            RoomStatusId = 1,
                            RoomTypeId = 1,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 9,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)1,
                            RoomDescription = "Tek kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet",
                            RoomNumber = (short)118,
                            RoomStatusId = 1,
                            RoomTypeId = 1,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 10,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)1,
                            RoomDescription = "Tek kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet",
                            RoomNumber = (short)119,
                            RoomStatusId = 1,
                            RoomTypeId = 1,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 11,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)1,
                            RoomDescription = "Üç kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar",
                            RoomNumber = (short)130,
                            RoomStatusId = 1,
                            RoomTypeId = 3,
                            SingleBadCount = (short)3
                        },
                        new
                        {
                            ID = 12,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)1,
                            RoomDescription = "Üç kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar",
                            RoomNumber = (short)131,
                            RoomStatusId = 1,
                            RoomTypeId = 3,
                            SingleBadCount = (short)3
                        },
                        new
                        {
                            ID = 13,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)1,
                            RoomDescription = "Üç kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar",
                            RoomNumber = (short)132,
                            RoomStatusId = 1,
                            RoomTypeId = 3,
                            SingleBadCount = (short)3
                        },
                        new
                        {
                            ID = 14,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)1,
                            RoomDescription = "Üç kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar",
                            RoomNumber = (short)133,
                            RoomStatusId = 1,
                            RoomTypeId = 3,
                            SingleBadCount = (short)3
                        },
                        new
                        {
                            ID = 15,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)1,
                            RoomDescription = "Üç kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar",
                            RoomNumber = (short)134,
                            RoomStatusId = 1,
                            RoomTypeId = 3,
                            SingleBadCount = (short)3
                        },
                        new
                        {
                            ID = 16,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)1,
                            RoomDescription = "Üç kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar",
                            RoomNumber = (short)135,
                            RoomStatusId = 1,
                            RoomTypeId = 3,
                            SingleBadCount = (short)3
                        },
                        new
                        {
                            ID = 17,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)1,
                            RoomDescription = "Üç kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar",
                            RoomNumber = (short)136,
                            RoomStatusId = 1,
                            RoomTypeId = 3,
                            SingleBadCount = (short)3
                        },
                        new
                        {
                            ID = 18,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)1,
                            RoomDescription = "Üç kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar",
                            RoomNumber = (short)137,
                            RoomStatusId = 1,
                            RoomTypeId = 3,
                            SingleBadCount = (short)3
                        },
                        new
                        {
                            ID = 19,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)1,
                            RoomDescription = "Üç kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar",
                            RoomNumber = (short)138,
                            RoomStatusId = 1,
                            RoomTypeId = 3,
                            SingleBadCount = (short)3
                        },
                        new
                        {
                            ID = 20,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)1,
                            RoomDescription = "Üç kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar",
                            RoomNumber = (short)139,
                            RoomStatusId = 1,
                            RoomTypeId = 3,
                            SingleBadCount = (short)3
                        },
                        new
                        {
                            ID = 21,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)2,
                            RoomDescription = "Tek kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet",
                            RoomNumber = (short)210,
                            RoomStatusId = 1,
                            RoomTypeId = 1,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 22,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)2,
                            RoomDescription = "Tek kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet",
                            RoomNumber = (short)211,
                            RoomStatusId = 1,
                            RoomTypeId = 1,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 23,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)2,
                            RoomDescription = "Tek kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet",
                            RoomNumber = (short)212,
                            RoomStatusId = 1,
                            RoomTypeId = 1,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 24,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)2,
                            RoomDescription = "Tek kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet",
                            RoomNumber = (short)213,
                            RoomStatusId = 1,
                            RoomTypeId = 1,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 25,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)2,
                            RoomDescription = "Tek kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet",
                            RoomNumber = (short)214,
                            RoomStatusId = 1,
                            RoomTypeId = 1,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 26,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)2,
                            RoomDescription = "Tek kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet",
                            RoomNumber = (short)215,
                            RoomStatusId = 1,
                            RoomTypeId = 1,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 27,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)2,
                            RoomDescription = "Tek kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet",
                            RoomNumber = (short)216,
                            RoomStatusId = 1,
                            RoomTypeId = 1,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 28,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)2,
                            RoomDescription = "Tek kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet",
                            RoomNumber = (short)217,
                            RoomStatusId = 1,
                            RoomTypeId = 1,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 29,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)2,
                            RoomDescription = "Tek kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet",
                            RoomNumber = (short)218,
                            RoomStatusId = 1,
                            RoomTypeId = 1,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 30,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)2,
                            RoomDescription = "Tek kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet",
                            RoomNumber = (short)219,
                            RoomStatusId = 1,
                            RoomTypeId = 1,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 31,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)2,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar",
                            RoomNumber = (short)220,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)2
                        },
                        new
                        {
                            ID = 32,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)2,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar",
                            RoomNumber = (short)221,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)2
                        },
                        new
                        {
                            ID = 33,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)2,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar",
                            RoomNumber = (short)222,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)2
                        },
                        new
                        {
                            ID = 34,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)2,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar",
                            RoomNumber = (short)223,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)2
                        },
                        new
                        {
                            ID = 35,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)2,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar",
                            RoomNumber = (short)224,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)2
                        },
                        new
                        {
                            ID = 36,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)2,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar",
                            RoomNumber = (short)225,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)2
                        },
                        new
                        {
                            ID = 37,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)2,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar",
                            RoomNumber = (short)226,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)2
                        },
                        new
                        {
                            ID = 38,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)2,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar",
                            RoomNumber = (short)227,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)2
                        },
                        new
                        {
                            ID = 39,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)2,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar",
                            RoomNumber = (short)228,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)2
                        },
                        new
                        {
                            ID = 40,
                            DoubleBadCount = (short)0,
                            FloorNumber = (short)2,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar",
                            RoomNumber = (short)229,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)2
                        },
                        new
                        {
                            ID = 41,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)3,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)320,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)0
                        },
                        new
                        {
                            ID = 42,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)3,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)321,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)0
                        },
                        new
                        {
                            ID = 43,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)3,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)322,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)0
                        },
                        new
                        {
                            ID = 44,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)3,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)323,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)0
                        },
                        new
                        {
                            ID = 45,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)3,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)324,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)0
                        },
                        new
                        {
                            ID = 46,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)3,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)325,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)0
                        },
                        new
                        {
                            ID = 47,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)3,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)326,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)0
                        },
                        new
                        {
                            ID = 48,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)3,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)327,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)0
                        },
                        new
                        {
                            ID = 49,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)3,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)328,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)0
                        },
                        new
                        {
                            ID = 50,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)3,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)329,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)0
                        },
                        new
                        {
                            ID = 51,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)3,
                            RoomDescription = "Üç kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)330,
                            RoomStatusId = 1,
                            RoomTypeId = 3,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 52,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)3,
                            RoomDescription = "Üç kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)331,
                            RoomStatusId = 1,
                            RoomTypeId = 3,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 53,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)3,
                            RoomDescription = "Üç kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)332,
                            RoomStatusId = 1,
                            RoomTypeId = 3,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 54,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)3,
                            RoomDescription = "Üç kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)333,
                            RoomStatusId = 1,
                            RoomTypeId = 3,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 55,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)3,
                            RoomDescription = "Üç kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)334,
                            RoomStatusId = 1,
                            RoomTypeId = 3,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 56,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)3,
                            RoomDescription = "Üç kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)335,
                            RoomStatusId = 1,
                            RoomTypeId = 3,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 57,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)3,
                            RoomDescription = "Üç kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)336,
                            RoomStatusId = 1,
                            RoomTypeId = 3,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 58,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)3,
                            RoomDescription = "Üç kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)337,
                            RoomStatusId = 1,
                            RoomTypeId = 3,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 59,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)3,
                            RoomDescription = "Üç kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)338,
                            RoomStatusId = 1,
                            RoomTypeId = 3,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 60,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)3,
                            RoomDescription = "Üç kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)339,
                            RoomStatusId = 1,
                            RoomTypeId = 3,
                            SingleBadCount = (short)1
                        },
                        new
                        {
                            ID = 61,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)4,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)420,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)0
                        },
                        new
                        {
                            ID = 62,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)4,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)421,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)0
                        },
                        new
                        {
                            ID = 63,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)4,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)422,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)0
                        },
                        new
                        {
                            ID = 64,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)4,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)423,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)0
                        },
                        new
                        {
                            ID = 65,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)4,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)424,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)0
                        },
                        new
                        {
                            ID = 66,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)4,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)425,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)0
                        },
                        new
                        {
                            ID = 67,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)4,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)426,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)0
                        },
                        new
                        {
                            ID = 68,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)4,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)427,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)0
                        },
                        new
                        {
                            ID = 69,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)4,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)428,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)0
                        },
                        new
                        {
                            ID = 70,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)4,
                            RoomDescription = "İki kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)429,
                            RoomStatusId = 1,
                            RoomTypeId = 2,
                            SingleBadCount = (short)0
                        },
                        new
                        {
                            ID = 71,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)4,
                            RoomDescription = "Dört kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)441,
                            RoomStatusId = 1,
                            RoomTypeId = 4,
                            SingleBadCount = (short)2
                        },
                        new
                        {
                            ID = 72,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)4,
                            RoomDescription = "Dört kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)442,
                            RoomStatusId = 1,
                            RoomTypeId = 4,
                            SingleBadCount = (short)2
                        },
                        new
                        {
                            ID = 73,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)4,
                            RoomDescription = "Dört kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)443,
                            RoomStatusId = 1,
                            RoomTypeId = 4,
                            SingleBadCount = (short)2
                        },
                        new
                        {
                            ID = 74,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)4,
                            RoomDescription = "Dört kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)444,
                            RoomStatusId = 1,
                            RoomTypeId = 4,
                            SingleBadCount = (short)2
                        },
                        new
                        {
                            ID = 75,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)4,
                            RoomDescription = "Dört kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)445,
                            RoomStatusId = 1,
                            RoomTypeId = 4,
                            SingleBadCount = (short)2
                        },
                        new
                        {
                            ID = 76,
                            DoubleBadCount = (short)1,
                            FloorNumber = (short)4,
                            RoomDescription = "Dört kişilik oda",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)446,
                            RoomStatusId = 1,
                            RoomTypeId = 4,
                            SingleBadCount = (short)2
                        },
                        new
                        {
                            ID = 77,
                            DoubleBadCount = (short)2,
                            FloorNumber = (short)4,
                            RoomDescription = "Kral Dairesi",
                            RoomFeatures = "Klima,Tv,Saç Kurutma Makinası,Kablosuz İnternet,Mini Bar,Balkon",
                            RoomNumber = (short)500,
                            RoomStatusId = 1,
                            RoomTypeId = 5,
                            SingleBadCount = (short)2
                        });
                });

            modelBuilder.Entity("Entities.Concrete.RoomImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomImages");
                });

            modelBuilder.Entity("Entities.Concrete.RoomStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoomStatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("RoomStatuses");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            RoomStatusName = "Müsait"
                        },
                        new
                        {
                            ID = 2,
                            RoomStatusName = "Dolu"
                        },
                        new
                        {
                            ID = 3,
                            RoomStatusName = "Temizlenecek"
                        },
                        new
                        {
                            ID = 4,
                            RoomStatusName = "Tadilatta"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.RoomType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RoomTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BasePrice = 200m,
                            RoomTypeName = "Tek Kişilik Oda"
                        },
                        new
                        {
                            ID = 2,
                            BasePrice = 300m,
                            RoomTypeName = "İki Kişilik Oda"
                        },
                        new
                        {
                            ID = 3,
                            BasePrice = 350m,
                            RoomTypeName = "Üç Kişilik Oda"
                        },
                        new
                        {
                            ID = 4,
                            BasePrice = 425m,
                            RoomTypeName = "Dört Kişilik Oda"
                        },
                        new
                        {
                            ID = 5,
                            BasePrice = 500m,
                            RoomTypeName = "Kral Dairesi"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.RoomTypeImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("RoomTypeImages");
                });

            modelBuilder.Entity("Entities.Concrete.Worker", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DutyId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NationalIdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("ID");

                    b.HasIndex("DutyId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Entities.Concrete.Booking", b =>
                {
                    b.HasOne("Entities.Concrete.AppUser", "AppUser")
                        .WithMany("Bookings")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.BookingPackage", "BookingPackage")
                        .WithMany()
                        .HasForeignKey("BookingPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("BookingPackage");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Entities.Concrete.Guest", b =>
                {
                    b.HasOne("Entities.Concrete.Room", "Room")
                        .WithMany("Guests")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Entities.Concrete.Manager", b =>
                {
                    b.HasOne("Entities.Concrete.Duty", "Duty")
                        .WithMany()
                        .HasForeignKey("DutyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Duty");
                });

            modelBuilder.Entity("Entities.Concrete.Payment", b =>
                {
                    b.HasOne("Entities.Concrete.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("Entities.Concrete.PayrollForManager", b =>
                {
                    b.HasOne("Entities.Concrete.Manager", "Manager")
                        .WithMany("PayrollForManagers")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Entities.Concrete.PayrollForWorker", b =>
                {
                    b.HasOne("Entities.Concrete.Worker", "Worker")
                        .WithMany("PayrollForWorkers")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Entities.Concrete.Room", b =>
                {
                    b.HasOne("Entities.Concrete.RoomStatus", "RoomStatus")
                        .WithMany()
                        .HasForeignKey("RoomStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomStatus");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Entities.Concrete.RoomImage", b =>
                {
                    b.HasOne("Entities.Concrete.Room", "Room")
                        .WithMany("RoomImages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Entities.Concrete.RoomTypeImage", b =>
                {
                    b.HasOne("Entities.Concrete.RoomType", "RoomType")
                        .WithMany("RoomTypeImages")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Entities.Concrete.Worker", b =>
                {
                    b.HasOne("Entities.Concrete.Duty", "Duty")
                        .WithMany()
                        .HasForeignKey("DutyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Duty");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Entities.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Entities.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.AppUser", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Entities.Concrete.Manager", b =>
                {
                    b.Navigation("PayrollForManagers");
                });

            modelBuilder.Entity("Entities.Concrete.Room", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Guests");

                    b.Navigation("RoomImages");
                });

            modelBuilder.Entity("Entities.Concrete.RoomType", b =>
                {
                    b.Navigation("RoomTypeImages");
                });

            modelBuilder.Entity("Entities.Concrete.Worker", b =>
                {
                    b.Navigation("PayrollForWorkers");
                });
#pragma warning restore 612, 618
        }
    }
}
